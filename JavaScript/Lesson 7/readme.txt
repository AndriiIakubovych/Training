При помощи механизма наследования определить базовый класс "Машина", в нём описать то, что свойственно всем машинам, а затем на его основе построить другие, более конкретные: "Кофеварка" и "Холодильник".
Базовый класс Machine должен реализовывать общего вида методы "включить" - enable() и "выключить" - disable().
Конструктор кофеварок должен называться CoffeeMachine. Локальные переменные, включая параметры конструктора, можно считать приватными свойствами (power – мощность кофеварки, которая указывается при создании и далее используется для расчёта времени кипячения). К локальным переменным конструктора нельзя обратиться снаружи, но они доступны внутри самого конструктора. Свойство waterAmount записывается в объект, а значит – доступно для модификации снаружи. Можно доливать и выливать воду в любом количестве. Публичный метод run запускает кофеварку, вспомогательные внутренние методы getBoilTime и onReady дают информацию о времени кипячения и о том, что кофе готов. Для расчёта времени на кипячение воды используется формула:
c * m * ΔT / power, где:
c – коэффициент теплоёмкости воды, физическая константа, равная 4200;
m – масса воды, которую нужно нагреть;
ΔT – температура, на которую нужно подогреть, будем считать, что изначально вода – комнатной температуры 20°С, то есть до 100° нужно греть на ΔT = 80;
power – мощность.
Добавить в кофеварку публичный метод stop(), который будет останавливать кипячение (через clearTimeout). Текущую температуру воды вычислять и хранить не требуется. Добавить приватное свойство timerId, которое будет хранить текущий таймер. Добавить кофеварке геттер для приватного свойства power, чтобы внешний код мог узнать мощность кофеварки. Добавить кофеварке публичный метод addWater(amount), который будет добавлять воду, при этом, конечно же, должны происходить все необходимые проверки – на положительность и превышение ёмкости. Создать сеттер setOnReady, чтобы код снаружи мог назначить свой onReady. Значение onReady по умолчанию должно быть таким же, как и раньше. Из внешнего кода следует иметь возможность понять – запущена кофеварка или нет, для этого добавить кофеварке публичный метод isRunning(), который будет возвращать true, если она запущена и false, если нет. В коде CoffeeMachine сделать так, чтобы метод run выводил ошибку, если кофеварка выключена. Когда кофеварку выключают – текущая варка кофе должна останавливаться. Реализовать возможность "запрограммировать" кофе-машину таким образом, чтобы когда кофе будет готов, вызывалась функция, определённая пользователем. Если пользователь не определил функцию, используется функция по умолчанию.
Создать класс для холодильника Fridge(power), наследующий от Machine, с приватным свойством food и методами addFood(...), getFood():
приватное свойство food хранит массив еды;
публичный метод addFood(item) добавляет в массив food новую еду, доступен вызов с несколькими аргументами addFoo(item1, item2...) для добавления нескольких элементов сразу;
если холодильник выключен, то добавить еду нельзя, будет ошибка;
максимальное количество еды ограничено power / 100, где power – мощность холодильника, указывается в конструкторе, при попытке добавить больше – будет ошибка;
публичный метод getFood() возвращает еду в виде массива, добавление или удаление элементов из которого не должно влиять на свойство food холодильника.
Добавить в холодильник методы:
публичный метод filterFood(func), который возвращает всю еду, для которой func(item) == true;
публичный метод removeFood(item), который удаляет еду item из холодильника.
Переопределите метод disable холодильника, чтобы при наличии в нём еды он выдавал ошибку.