<Window x:Class="GraphicFilesView.FolderDialog" Name="folderDialog" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" mc:Ignorable="d" xmlns:system="clr-namespace:System;assembly=mscorlib" Title="Выбор папки" Width="520" Height="453" MinWidth="520" MinHeight="453" Background="#505050" WindowStartupLocation="CenterScreen" DataContext="{ Binding ElementName=folderDialog, Path=ViewModel }" WindowStyle="ToolWindow" ResizeMode="CanResizeWithGrip" ShowInTaskbar="False">
    <Window.Resources>
        <ControlTemplate x:Key="folderButtonControlTemplate" TargetType="{ x:Type ButtonBase }">
            <Border Name="border" Background="{ TemplateBinding Background }" BorderBrush="{ TemplateBinding BorderBrush }" BorderThickness="{ TemplateBinding BorderThickness }" SnapsToDevicePixels="True">
                <ContentPresenter Name="contentPresenter" ContentTemplate="{ TemplateBinding ContentTemplate }" Content="{ TemplateBinding Content }" ContentStringFormat="{ TemplateBinding ContentStringFormat }" Focusable="False" HorizontalAlignment="{ TemplateBinding HorizontalContentAlignment }" RecognizesAccessKey="True" SnapsToDevicePixels="{ TemplateBinding SnapsToDevicePixels }" VerticalAlignment="{ TemplateBinding VerticalContentAlignment }" Margin="{ TemplateBinding Padding }"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" TargetName="border" Value="#787878"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="operationButtonControlTemplate" TargetType="{ x:Type ButtonBase }">
            <Border Name="border" Background="{ TemplateBinding Background }" BorderBrush="{ TemplateBinding BorderBrush }" BorderThickness="{ TemplateBinding BorderThickness }" SnapsToDevicePixels="True">
                <ContentPresenter Name="contentPresenter" ContentTemplate="{ TemplateBinding ContentTemplate }" Content="{ TemplateBinding Content }" ContentStringFormat="{ TemplateBinding ContentStringFormat }" Focusable="False" HorizontalAlignment="{ TemplateBinding HorizontalContentAlignment }" RecognizesAccessKey="True" SnapsToDevicePixels="{ TemplateBinding SnapsToDevicePixels }" VerticalAlignment="{ TemplateBinding VerticalContentAlignment }" Margin="{ TemplateBinding Padding }"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" TargetName="border" Value="#8c8c8c"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" TargetName="border" Value="#a0a0a0"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style TargetType="Button">
            <Setter Property="Foreground" Value="#aeaeae"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="#e1e1e1"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <SolidColorBrush x:Key="TextBox.Static.Border" Color="#464646"/>
        <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#464646"/>
        <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#464646"/>
        <Style TargetType="{ x:Type TextBox }">
            <Setter Property="Background" Value="{ DynamicResource { x:Static SystemColors.WindowBrushKey } }"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="{ StaticResource TextBox.Static.Border }"/>
            <Setter Property="Foreground" Value="{ DynamicResource { x:Static SystemColors.ControlTextBrushKey } }"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{ x:Type TextBox }">
                        <Border Name="border" Background="{ TemplateBinding Background }" BorderThickness="{ TemplateBinding BorderThickness }" BorderBrush="{ TemplateBinding BorderBrush }" SnapsToDevicePixels="True">
                            <ScrollViewer Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{ StaticResource TextBox.MouseOver.Border }"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{ StaticResource TextBox.Focus.Border }"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{ DynamicResource { x:Static SystemColors.InactiveSelectionHighlightBrushKey } }"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="focusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle SnapsToDevicePixels="true" Stroke="{ DynamicResource { x:Static SystemColors.ControlTextBrushKey } }" StrokeThickness="1" StrokeDashArray="1 2" Margin="2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#ffffffff"/>
        <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#ff707070"/>
        <Style x:Key="OptionMarkFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle SnapsToDevicePixels="true" Stroke="{ DynamicResource { x:Static SystemColors.ControlTextBrushKey } }" StrokeThickness="1" StrokeDashArray="1 2" Margin="14, 0, 0, 0"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#787878"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#464646"/>
        <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#ff212121"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#ffe6e6e6"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#ffbcbcbc"/>
        <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#ff707070"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#787878"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#464646"/>
        <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#ff212121"/>
        <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#ff212121"/>
        <Style x:Key="checkBoxStyle" TargetType="{ x:Type CheckBox }">
            <Setter Property="FocusVisualStyle" Value="{ StaticResource focusVisual }"/>
            <Setter Property="Background" Value="{ StaticResource OptionMark.Static.Background }"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="{ StaticResource OptionMark.Static.Border }"/>
            <Setter Property="Foreground" Value="{ DynamicResource { x:Static SystemColors.ControlTextBrushKey } }"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{ x:Type CheckBox }">
                        <Grid Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border Name="checkBoxBorder" Background="{ TemplateBinding Background }" BorderThickness="{ TemplateBinding BorderThickness }" BorderBrush="{ TemplateBinding BorderBrush }" HorizontalAlignment="{ TemplateBinding HorizontalContentAlignment }" VerticalAlignment="{ TemplateBinding VerticalContentAlignment }" Margin="1">
                                <Grid Name="markGrid">
                                    <Path Name="optionMark" Data="F1 M 9.97498, 1.22334L 4.6983, 9.09834L 4.52164, 9.09834L 0, 5.19331L 1.27664, 3.52165L 4.255, 6.08833L 8.33331, 1.52588e-005L 9.97498, 1.22334 Z " Fill="{ StaticResource OptionMark.Static.Glyph }" Opacity="0" Stretch="None" Margin="1"/>
                                    <Rectangle Name="indeterminateMark" Fill="{ StaticResource OptionMark.Static.Glyph }" Opacity="0" Margin="2"/>
                                </Grid>
                            </Border>
                            <ContentPresenter Name="contentPresenter" Grid.Column="1" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{ TemplateBinding SnapsToDevicePixels }" HorizontalAlignment="{ TemplateBinding HorizontalContentAlignment }" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{ TemplateBinding Padding }"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasContent" Value="true">
                                <Setter Property="FocusVisualStyle" Value="{ StaticResource OptionMarkFocusVisual }"/>
                                <Setter Property="Padding" Value="4, -1, 0, 0"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{ StaticResource OptionMark.MouseOver.Background }"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{ StaticResource OptionMark.MouseOver.Border }"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{ StaticResource OptionMark.MouseOver.Glyph }"/>
                                <Setter Property="Fill" TargetName="indeterminateMark" Value="{ StaticResource OptionMark.MouseOver.Glyph }"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{ StaticResource OptionMark.Disabled.Background }"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{ StaticResource OptionMark.Disabled.Border }"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{ StaticResource OptionMark.Disabled.Glyph }"/>
                                <Setter Property="Fill" TargetName="indeterminateMark" Value="{ StaticResource OptionMark.Disabled.Glyph }"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="checkBoxBorder" Value="{ StaticResource OptionMark.Pressed.Background }"/>
                                <Setter Property="BorderBrush" TargetName="checkBoxBorder" Value="{ StaticResource OptionMark.Pressed.Border }"/>
                                <Setter Property="Fill" TargetName="optionMark" Value="{ StaticResource OptionMark.Pressed.Glyph }"/>
                                <Setter Property="Fill" TargetName="indeterminateMark" Value="{ StaticResource OptionMark.Pressed.Glyph }"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Opacity" TargetName="optionMark" Value="1"/>
                                <Setter Property="Opacity" TargetName="indeterminateMark" Value="0"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter Property="Opacity" TargetName="optionMark" Value="0"/>
                                <Setter Property="Opacity" TargetName="indeterminateMark" Value="1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="scrollBarLineButtonTopStyle" TargetType="{ x:Type RepeatButton }">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{ x:Type RepeatButton }">
                        <Canvas Height="18">
                            <Polygon Fill="#646464" Points="3, 15 15, 15 9, 3"/>
                        </Canvas>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="scrollBarLineButtonBottomStyle" TargetType="{ x:Type RepeatButton }">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{ x:Type RepeatButton }">
                        <Canvas Height="18">
                            <Polygon Fill="#646464" Points="3, 3 9, 15 15, 3"/>
                        </Canvas>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="scrollBarLineButtonLeftStyle" TargetType="{ x:Type RepeatButton }">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{ x:Type RepeatButton }">
                        <Canvas Width="18">
                            <Polygon Fill="#646464" Points="3, 9 15, 15 15, 3"/>
                        </Canvas>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="scrollBarLineButtonRightStyle" TargetType="{ x:Type RepeatButton }">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{ x:Type RepeatButton }">
                        <Canvas Width="18">
                            <Polygon Fill="#646464" Points="3, 15 15, 9 3, 3"/>
                        </Canvas>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="scrollBarPageButtonStyle" TargetType="{ x:Type RepeatButton }">
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{ x:Type RepeatButton }">
                        <Border BorderBrush="Transparent"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="scrollBarThumbStyle" TargetType="{ x:Type Thumb }">
            <Setter Property="IsTabStop" Value="False"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Margin" Value="1, 0, 1, 0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{ x:Type Thumb }">
                        <Rectangle Fill="#646464" Margin="2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="horizontalScrollBar" TargetType="{ x:Type ScrollBar }">
            <Grid Background="#464646">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MaxWidth="18"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MaxWidth="18"/>
                </Grid.ColumnDefinitions>
                <RepeatButton Grid.Column="0" Width="18" Style="{ StaticResource scrollBarLineButtonLeftStyle }" Command="ScrollBar.LineLeftCommand"/>
                <Track Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{ StaticResource scrollBarPageButtonStyle }" Command="ScrollBar.PageLeftCommand"/>
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{ StaticResource scrollBarThumbStyle }"/>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{ StaticResource scrollBarPageButtonStyle }" Command="ScrollBar.PageRightCommand"/>
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton Grid.Column="3" Width="18" Style="{ StaticResource scrollBarLineButtonRightStyle }" Command="ScrollBar.LineRightCommand"/>
                <Label Grid.Column="3" Width="18" Background="#505050" Margin="0, 0, -36, 0"/>
            </Grid>
        </ControlTemplate>
        <ControlTemplate x:Key="verticalScrollBar" TargetType="{ x:Type ScrollBar }">
            <Grid Background="#464646">
                <Grid.RowDefinitions>
                    <RowDefinition MaxHeight="18"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition MaxHeight="18"/>
                </Grid.RowDefinitions>
                <RepeatButton Grid.Row="0" Height="18" Style="{ StaticResource scrollBarLineButtonTopStyle }" Command="ScrollBar.LineUpCommand"/>
                <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="True">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{ StaticResource scrollBarPageButtonStyle }" Command="ScrollBar.PageUpCommand"/>
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{ StaticResource scrollBarThumbStyle }"/>
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{ StaticResource scrollBarPageButtonStyle }" Command="ScrollBar.PageDownCommand"/>
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton Grid.Row="3" Height="18" Style="{ StaticResource scrollBarLineButtonBottomStyle }" Command="ScrollBar.LineDownCommand"/>
            </Grid>
        </ControlTemplate>
        <Style TargetType="{ x:Type ScrollBar }">
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Template" Value="{ StaticResource horizontalScrollBar }"/>
                </Trigger>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="Template" Value="{ StaticResource verticalScrollBar }"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <DockPanel>
        <StackPanel DockPanel.Dock="Bottom">
            <TextBox Height="25" Background="#646464" Foreground="#aeaeae" Text="{ Binding SelectedFolder }" VerticalContentAlignment="Center" Margin="10"/>
            <CheckBox Background="#646464" BorderBrush="#464646" Foreground="#aeaeae" IsChecked="{ Binding AllTreeDepthSearch }" Content="Искать на всю глубину дерева" Margin="10, 0, 10, 0" Style="{ DynamicResource checkBoxStyle }"/>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                <Button Width="100" Height="25" Background="#787878" BorderBrush="#464646" Foreground="#2d2d2d" Content="Подтвердить" Template="{ DynamicResource operationButtonControlTemplate }" Margin="10" Click="Ok_Click"/>
                <Button Width="100" Height="25" Background="#787878" BorderBrush="#464646" Foreground="#2d2d2d" Content="Отмена" IsCancel="True" Template="{ DynamicResource operationButtonControlTemplate }" Margin="0, 10, 10, 10"/>
            </StackPanel>
        </StackPanel>
        <DockPanel>
            <Border BorderThickness="2" BorderBrush="#505050">
                <StackPanel DockPanel.Dock="Left" Background="#505050" Orientation="Vertical" HorizontalAlignment="Left">
                    <Button Background="#505050" BorderThickness="0" Template="{ DynamicResource folderButtonControlTemplate }" Command="{ Binding FolderSelectedCommand }" CommandParameter="{ x:Static system:Environment+SpecialFolder.Desktop }" Padding="5">
                        <StackPanel>
                            <Image Width="55" Height="35" Source="desktop.png"/>
                            <TextBlock Text="Рабочий стол" HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Button>
                    <Button Background="#505050" BorderThickness="0" Template="{ DynamicResource folderButtonControlTemplate }" Command="{ Binding FolderSelectedCommand }" CommandParameter="{ x:Static system:Environment+SpecialFolder.ProgramFiles }" Padding="5">
                        <StackPanel>
                            <Image Width="55" Height="35" Source="program-files.png"/>
                            <TextBlock Text="Program Files" HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Button>
                    <Button Background="#505050" BorderThickness="0" Template="{ DynamicResource folderButtonControlTemplate }" Command="{ Binding FolderSelectedCommand }" CommandParameter="{ x:Static system:Environment+SpecialFolder.MyDocuments }" Padding="5">
                        <StackPanel>
                            <Image Width="55" Height="35" Source="my-documents.png"/>
                            <TextBlock Text="Документы" HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Button>
                    <Button Background="#505050" BorderThickness="0" Template="{ DynamicResource folderButtonControlTemplate }" Command="{ Binding FolderSelectedCommand }" CommandParameter="{ x:Static system:Environment+SpecialFolder.MyPictures }" Padding="5">
                        <StackPanel>
                            <Image Width="55" Height="35" Source="my-pictures.png"/>
                            <TextBlock Text="Изображения" HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Button>
                    <Button Background="#505050" BorderThickness="0" Template="{ DynamicResource folderButtonControlTemplate }" Command="{ Binding FolderSelectedCommand }" CommandParameter="{ x:Static system:Environment+SpecialFolder.MyVideos }" Padding="5">
                        <StackPanel>
                            <Image Width="55" Height="35" Source="my-videos.png"/>
                            <TextBlock Text="Видео" HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Button>
                </StackPanel>
            </Border>
            <TreeView Background="#646464" BorderThickness="1" BorderBrush="#464646" SelectedValuePath="" ItemsSource="{ Binding Folders }">
                <TreeView.Resources>
                    <SolidColorBrush x:Key="{ x:Static SystemColors.ControlTextBrushKey }" Color="#aeaeae"/>
                    <SolidColorBrush x:Key="{ x:Static SystemColors.HighlightBrushKey }" Color="#92b3d8"/>
                    <SolidColorBrush x:Key="{ x:Static SystemColors.HighlightTextBrushKey }" Color="#2d2d2d"/>
                    <SolidColorBrush x:Key="{ x:Static SystemColors.InactiveSelectionHighlightBrushKey }" Color="Transparent"/>
                    <SolidColorBrush x:Key="{ x:Static SystemColors.InactiveSelectionHighlightTextBrushKey }" Color="#aeaeae"/>
                </TreeView.Resources>
                <TreeView.ItemContainerStyle>
                    <Style TargetType="{ x:Type TreeViewItem }">
                        <Setter Property="IsExpanded" Value="{ Binding IsExpanded, Mode=TwoWay }"/>
                        <Setter Property="IsSelected" Value="{ Binding IsSelected, Mode=TwoWay }"/>
                    </Style>
                </TreeView.ItemContainerStyle>
                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate ItemsSource="{ Binding Folders }">
                        <StackPanel Orientation="Horizontal">
                            <Image Height="13" Source="{ Binding FolderIcon }" Margin="2"/>
                            <TextBlock Height="18" Text="{ Binding FolderName }" Margin="2"/>
                        </StackPanel>
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
            </TreeView>
        </DockPanel>
    </DockPanel>
</Window>